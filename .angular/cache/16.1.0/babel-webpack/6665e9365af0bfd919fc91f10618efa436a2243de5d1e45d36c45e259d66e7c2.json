{"ast":null,"code":"import { Store } from '@ngrx/store';\nimport { Actions } from '@ngrx/effects';\nimport { take, map, switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as RecipeActions from './store/recipe.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nexport let RecipesResolverService = /*#__PURE__*/(() => {\n  class RecipesResolverService {\n    constructor(store, actions$) {\n      this.store = store;\n      this.actions$ = actions$;\n    }\n    resolve(route, state) {\n      // return this.dataStorageService.fetchRecipes();\n      return this.store.select('recipes').pipe(take(1), map(recipesState => {\n        return recipesState.recipes;\n      }), switchMap(recipes => {\n        if (recipes.length === 0) {\n          this.store.dispatch(RecipeActions.fetchRecipes());\n          return of([]);\n        } else {\n          return of(recipes);\n        }\n      }));\n    }\n  }\n  RecipesResolverService.ɵfac = function RecipesResolverService_Factory(t) {\n    return new (t || RecipesResolverService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions));\n  };\n  RecipesResolverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecipesResolverService,\n    factory: RecipesResolverService.ɵfac,\n    providedIn: 'root'\n  });\n  return RecipesResolverService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}