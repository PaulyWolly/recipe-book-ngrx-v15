{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Router } from '@angular/router';\nimport { Actions, ofType, Effect } from '@ngrx/effects';\nimport { switchMap, catchError, map, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as AuthActions from './auth.actions';\nimport { User } from '../user.model';\nimport { AuthService } from '../auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../auth.service\";\nconst handleAuthentication = (expiresIn, email, userId, token) => {\n  const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n  const user = new User(email, userId, token, expirationDate);\n  localStorage.setItem('userData', JSON.stringify(user));\n  return new AuthActions.AuthenticateSuccess({\n    email,\n    userId,\n    token,\n    expirationDate,\n    redirect: true\n  });\n};\nconst handleError = errorRes => {\n  let errorMessage = 'An unknown error occurred!';\n  if (!errorRes.error || !errorRes.error.error) {\n    return of(new AuthActions.AuthenticateFail(errorMessage));\n  }\n  switch (errorRes.error.error.message) {\n    case 'EMAIL_EXISTS':\n      errorMessage = 'This email exists already';\n      break;\n    case 'EMAIL_NOT_FOUND':\n      errorMessage = 'This email does not exist.';\n      break;\n    case 'INVALID_PASSWORD':\n      errorMessage = 'This password is not correct.';\n      break;\n  }\n  return of(new AuthActions.AuthenticateFail(errorMessage));\n};\nexport class AuthEffects {\n  constructor(actions$, http, router, authService) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.router = router;\n    this.authService = authService;\n    this.authSignup = this.actions$.pipe(ofType(AuthActions.SIGNUP_START), switchMap(signupAction => {\n      return this.http.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=' + environment.firebaseAPIKey, {\n        email: signupAction.payload.email,\n        password: signupAction.payload.password,\n        returnSecureToken: true\n      }).pipe(tap(resData => {\n        this.authService.setLogoutTimer(+resData.expiresIn * 1000);\n      }), map(resData => {\n        return handleAuthentication(+resData.expiresIn, resData.email, resData.localId, resData.idToken);\n      }), catchError(errorRes => {\n        return handleError(errorRes);\n      }));\n    }));\n    this.authLogin = this.actions$.pipe(ofType(AuthActions.LOGIN_START), switchMap(authData => {\n      return this.http.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=' + environment.firebaseAPIKey, {\n        email: authData.payload.email,\n        password: authData.payload.password,\n        returnSecureToken: true\n      }).pipe(tap(resData => {\n        this.authService.setLogoutTimer(+resData.expiresIn * 1000);\n      }), map(resData => {\n        return handleAuthentication(+resData.expiresIn, resData.email, resData.localId, resData.idToken);\n      }), catchError(errorRes => {\n        return handleError(errorRes);\n      }));\n    }));\n    this.authRedirect = this.actions$.pipe(ofType(AuthActions.AUTHENTICATE_SUCCESS), tap(authSuccessAction => {\n      if (authSuccessAction.payload.redirect) {\n        this.router.navigate(['/']);\n      }\n    }));\n    this.autoLogin = this.actions$.pipe(ofType(AuthActions.AUTO_LOGIN), map(() => {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n      if (!userData) {\n        return {\n          type: 'DUMMY'\n        };\n      }\n      const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n      if (loadedUser.token) {\n        // this.user.next(loadedUser);\n        const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.authService.setLogoutTimer(expirationDuration);\n        return new AuthActions.AuthenticateSuccess({\n          email: loadedUser.email,\n          userId: loadedUser.id,\n          token: loadedUser.token,\n          expirationDate: new Date(userData._tokenExpirationDate),\n          redirect: false\n        });\n        // const expirationDuration =\n        //   new Date(userData._tokenExpirationDate).getTime() -\n        //   new Date().getTime();\n        // this.autoLogout(expirationDuration);\n      }\n\n      return {\n        type: 'DUMMY'\n      };\n    }));\n    this.authLogout = this.actions$.pipe(ofType(AuthActions.LOGOUT), tap(() => {\n      this.authService.clearLogoutTimer();\n      localStorage.clear();\n      localStorage.removeItem('userData');\n      this.router.navigate(['/auth']);\n    }));\n  }\n}\nAuthEffects.ɵfac = function AuthEffects_Factory(t) {\n  return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AuthService));\n};\nAuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthEffects,\n  factory: AuthEffects.ɵfac\n});\n__decorate([Effect(), __metadata(\"design:type\", Object)], AuthEffects.prototype, \"authSignup\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], AuthEffects.prototype, \"authLogin\", void 0);\n__decorate([Effect({\n  dispatch: false\n}), __metadata(\"design:type\", Object)], AuthEffects.prototype, \"authRedirect\", void 0);\n__decorate([Effect(), __metadata(\"design:type\", Object)], AuthEffects.prototype, \"autoLogin\", void 0);\n__decorate([Effect({\n  dispatch: false\n}), __metadata(\"design:type\", Object)], AuthEffects.prototype, \"authLogout\", void 0);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}